{"version":3,"sources":["webpack:///./src/lib/hooks/useCount.js","webpack:///./src/lib/hooks/useInfiniteScroll.js","webpack:///./src/components/CategoryMenu.js"],"names":["useCount","path","initialCount","window","sessionStorage","getItem","useState","Number","count","setCount","countRef","useRef","useEffect","current","setItem","prev","useInfiniteScroll","callBack","ref","oBserver","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","disconnect","Wrapper","CategoryMenu","isDarkMode","useContext","ThemeContext","isVisible","setIsVisible","nodes","useStaticQuery","categories","css","onClick","map","category","index","relativePath","key","decodeURI","to","replace","trim","darkModeColor","mainColor1","mainColor2","mainColor3","whiteModeColor"],"mappings":"2FAAA,gBAmBeA,IAjBE,SAACC,GAChB,IAAMC,EACJ,oBAAOC,OACHA,OAAOC,eAAeC,QAAWJ,EAAjC,UACA,EACN,EAA0BK,mBAASC,OAAOL,IAAnCM,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAOH,GAQxB,OALAI,qBAAU,WACRF,EAASG,QAAUL,EACnBL,OAAOC,eAAeU,QAAWb,EAAjC,SAA+CO,KAC9C,CAACA,EAAOP,IAEJ,CAACO,EAAOE,EAPO,kBAAMD,GAAS,SAACM,GAAD,OAAUA,EAAO,S,kCCTxD,gBAkBeC,IAhBW,SAACC,EAAUC,GACnCN,qBAAU,WACR,IAAIO,EAUJ,OATID,EAAIL,UACNM,EAAW,IAAIC,sBAAqB,SAACC,GACnCA,EAAQC,SAAQ,SAACC,GACVA,EAAMC,gBACXP,WAGKQ,QAAQP,EAAIL,SAEhB,kBAAMM,GAAYA,EAASO,gBACjC,CAACR,EAAKD,M,yHCTX,IAAMU,EAAO,wL,iFA4KEC,IA1KM,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACd4B,EAAeC,qBAAWC,KAA1BF,WACR,EAAkCvB,oBAAS,GAApC0B,EAAP,KAAkBC,EAAlB,KAGgBC,EACZC,yBAAe,cADjBC,WAAcF,MAehB,OACE,8BACE,YAACP,EAAD,KACE,sBACEU,IAAKA,YAAF,gKAGCR,EAAU,8IAHX,KAKHS,QAAS,WACPL,GAAcD,KAPlB,mBAUmBA,EAAY,IAAM,KAErC,kBACEK,IAAKA,YAAF,iEAEUL,EAAY,QAAU,OAFhC,MAKFE,EAAMK,KAAI,SAACC,EAAUC,GACpB,MAA8B,KAA1BD,EAASE,aAET,kBACEC,IAAG,gBAAkBF,EACrBJ,IAAKA,YAAF,yKAGCpC,GACF2C,UAAU3C,KAAV,IAAwBuC,EAASE,aAAjC,KADE,kFAIWb,EAAa,UAAY,WAJpC,8BAHD,kBAUUA,EAAa,UAAY,UAVnC,OAcH,YAAC,OAAD,CAAMgB,GAAE,IAAML,EAASE,aAAf,KACLF,EAASE,aACPI,QAAQ,IAAK,KACbC,OACAD,QAAQ,IAAK,OAKjB,QAIb,mBACET,IAAKA,YAAF,klBAkCKR,EACEmB,gBAAcC,WACd,IACAD,gBAAcE,WACd,IACAF,gBAAcG,WACdC,iBAAeH,WACf,IACAG,iBAAeF,WACf,IACAE,iBAAeD,WA5CtB,8BAkDH,kBACEd,IAAKA,YAAF,gKAGCR,EAAU,8IAHX,MAMH,YAAC,OAAD,CAAMgB,GAAE,KAAR,eAEF,kBAAIR,IAAG,GACJH,EAAMK,KAAI,SAACC,EAAUC,GACpB,MAA8B,KAA1BD,EAASE,aAET,kBACEC,IAAG,YAAcF,EACjBJ,IAAKA,YAAF,sIAGCpC,GACF2C,UAAU3C,KAAV,IAAwBuC,EAASE,aAAjC,KADE,kFAIWb,EAAa,UAAY,WAJpC,8BAHD,kBAUUA,EAAa,UAAY,UAVnC,OAcH,YAAC,OAAD,CAAMgB,GAAE,IAAML,EAASE,aAAf,KACLF,EAASE,aACPI,QAAQ,IAAK,KACbC,OACAD,QAAQ,IAAK,OAKjB","file":"13edda3262689c547daf42fcd6a56f5dba9bac6a-2966381b3e6f2b8b170d.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nconst useCount = (path) => {\n  const initialCount =\n    typeof window !== `undefined`\n      ? window.sessionStorage.getItem(`${path}_count`)\n      : 1\n  const [count, setCount] = useState(Number(initialCount))\n  const countRef = useRef(count)\n  const increaseCount = () => setCount((prev) => prev + 1)\n\n  useEffect(() => {\n    countRef.current = count\n    window.sessionStorage.setItem(`${path}_count`, count)\n  }, [count, path])\n\n  return [count, countRef, increaseCount]\n}\n\nexport default useCount\n","import { useEffect } from \"react\"\n\nconst useInfiniteScroll = (callBack, ref) => {\n  useEffect(() => {\n    let oBserver\n    if (ref.current) {\n      oBserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return\n          callBack()\n        })\n      })\n      oBserver.observe(ref.current)\n    }\n    return () => oBserver && oBserver.disconnect()\n  }, [ref, callBack])\n}\n\nexport default useInfiniteScroll\n","import React, { useContext, useState } from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport tw, { css } from \"twin.macro\"\nimport { whiteModeColor, darkModeColor } from \"../../them-color\"\nimport ThemeContext from \"../lib/context/ThemContext\"\n\nconst Wrapper = tw.div`block xl:hidden w-full max-w-screen-md mx-auto`\n\nconst CategoryMenu = ({ path }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const [isVisible, setIsVisible] = useState(false)\n\n  const {\n    categories: { nodes },\n  } = useStaticQuery(\n    graphql`\n      query {\n        categories: allDirectory(\n          filter: { absolutePath: { regex: \"/^((?!image).)*$/\" } }\n        ) {\n          nodes {\n            relativePath\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <>\n      <Wrapper>\n        <button\n          css={css`\n            transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n            ${tw`mx-4 mt-2 font-bold mb-2 text-lg`}\n            ${isDarkMode ? tw`text-gray-400` : tw`text-gray-700`};\n          `}\n          onClick={() => {\n            setIsVisible(!isVisible)\n          }}\n        >\n          Categories List {isVisible ? \"▲\" : \"▼\"}\n        </button>\n        <ul\n          css={css`\n            ${tw`mx-4 mt-2`}\n            display: ${isVisible ? \"block\" : \"none\"};\n          `}\n        >\n          {nodes.map((category, index) => {\n            if (category.relativePath !== \"\") {\n              return (\n                <li\n                  key={`categorylist_${index}`}\n                  css={css`\n                    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n                    ${tw`text-gray-500 text-base mx-2`}\n                    ${path &&\n                    decodeURI(path) === `/${category.relativePath}/` &&\n                    `\n                        font-size: 0.95rem;\n                        color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                        `}\n                        &:hover {\n                      color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                    }\n                  `}\n                >\n                  <Link to={`/${category.relativePath}/`}>\n                    {category.relativePath\n                      .replace(\"/\", \" \")\n                      .trim()\n                      .replace(\" \", \"/\")}\n                  </Link>\n                </li>\n              )\n            }\n            return \"\"\n          })}\n        </ul>\n      </Wrapper>\n      <div\n        css={css`\n          ::-webkit-scrollbar {\n            width: 4px;\n          }\n          ::-webkit-scrollbar-track {\n            background-color: transparent;\n          }\n          ::-webkit-scrollbar-thumb {\n            border-radius: 9999px;\n            background-color: gray;\n          }\n          ::-webkit-scrollbar-button {\n            width: 0;\n            height: 0;\n          }\n          /* Firefox scrollbar */\n          scrollbar-width: thin;\n          scrollbar-color: gray transparent;\n          display: none;\n          @media screen and (min-width: 1280px) {\n            float: left;\n            position: sticky;\n            top: 100px;\n            width: calc((100vw - 720px) / 2 - 80px);\n            max-width: 250px;\n            margin-left: calc((100vw - 1280px) / 2);\n            overflow: auto;\n            word-break: break-word;\n            max-height: calc(100vh - 200px);\n            fontsize: 1rem;\n            display: block;\n            border-left-width: 4px;\n            border-image: linear-gradient(\n              180deg,\n              ${isDarkMode\n                ? darkModeColor.mainColor1 +\n                  \",\" +\n                  darkModeColor.mainColor2 +\n                  \",\" +\n                  darkModeColor.mainColor3\n                : whiteModeColor.mainColor1 +\n                  \",\" +\n                  whiteModeColor.mainColor2 +\n                  \",\" +\n                  whiteModeColor.mainColor3}\n            );\n            border-image-slice: 1;\n          }\n        `}\n      >\n        <h3\n          css={css`\n            transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n            ${tw`mx-4 mt-2 font-bold mb-2 text-lg`}\n            ${isDarkMode ? tw`text-gray-400` : tw`text-gray-700`};\n          `}\n        >\n          <Link to={`/`}>Categories</Link>\n        </h3>\n        <ul css={tw`mx-4 mt-2`}>\n          {nodes.map((category, index) => {\n            if (category.relativePath !== \"\") {\n              return (\n                <li\n                  key={`category_${index}`}\n                  css={css`\n                    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n                    ${tw`text-gray-500 text-sm`}\n                    ${path &&\n                    decodeURI(path) === `/${category.relativePath}/` &&\n                    `\n                        font-size: 0.95rem;\n                        color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                        `}\n                        &:hover {\n                      color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                    }\n                  `}\n                >\n                  <Link to={`/${category.relativePath}/`}>\n                    {category.relativePath\n                      .replace(\"/\", \" \")\n                      .trim()\n                      .replace(\" \", \"/\")}\n                  </Link>\n                </li>\n              )\n            }\n            return \"\"\n          })}\n        </ul>\n      </div>\n    </>\n  )\n}\n\nexport default CategoryMenu\n"],"sourceRoot":""}