{"version":3,"sources":["webpack:///./src/lib/hooks/useCount.js","webpack:///./src/templates/category.js","webpack:///./src/lib/hooks/useInfiniteScroll.js","webpack:///./src/components/CategoryMenu.js"],"names":["useCount","path","initialCount","window","sessionStorage","getItem","useState","Number","count","setCount","countRef","useRef","useEffect","current","setItem","prev","Wrapper","data","location","posts","allMarkdownRemark","edges","countOfInitialPost","site","siteMetadata","configs","categoryTitle","String","pathname","split","join","trim","increaseCount","bottomRef","tag","filteredPosts","state","setState","tags","useMemo","result","map","node","frontmatter","i","length","j","splice","setFilteredPosts","useCallback","undefined","filter","post","includes","useInfiniteScroll","href","queryString","parseUrl","query","title","className","css","onTagClick","navigate","slice","index","key","ref","pageQuery","callBack","oBserver","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","disconnect","CategoryMenu","isDarkMode","useContext","ThemeContext","isVisible","setIsVisible","nodes","useStaticQuery","categories","onClick","category","relativePath","decodeURI","to","replace","darkModeColor","mainColor1","mainColor2","mainColor3","whiteModeColor"],"mappings":"4FAAA,gBAmBeA,IAjBE,SAACC,GAChB,IAAMC,EACJ,oBAAOC,OACHA,OAAOC,eAAeC,QAAWJ,EAAjC,UACA,EAJmB,EAKCK,mBAASC,OAAOL,IAAnCM,EALkB,KAKXC,EALW,KAMnBC,EAAWC,iBAAOH,GAQxB,OALAI,qBAAU,WACRF,EAASG,QAAUL,EACnBL,OAAOC,eAAeU,QAAWb,EAAjC,SAA+CO,KAC9C,CAACA,EAAOP,IAEJ,CAACO,EAAOE,EAPO,kBAAMD,GAAS,SAACM,GAAD,OAAUA,EAAO,S,wQCIlDC,EAAO,iI,qMAEE,sBAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAuBL,EAAKM,KAAKC,aAAaC,QAA9CH,mBACFI,EAAgBC,OAAOT,EAASU,UAAUC,MAAM,KAAKC,KAAK,KAAKC,OAHhC,EAKI/B,YAAS0B,GAA3ClB,EAL8B,KAKvBE,EALuB,KAKbsB,EALa,KAM/BC,EAAYtB,mBANmB,EAQXL,mBAAS,CACjC4B,IAAK,MACLC,cAAehB,IAFViB,EAR8B,KAQvBC,EARuB,KAa/BC,EAAOC,mBAAQ,WACnB,IAAIC,EAAS,GACbrB,EAAMsB,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAeF,EAAM,sBAAOA,GAAP,YAAkBE,EAAKC,YAAYL,UAClE,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAOK,SAAUD,EACnC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIN,EAAOK,SAAUC,EACnCN,EAAOI,KAAOJ,EAAOM,IAAIN,EAAOO,OAAOD,IAAK,GAGpD,OAAON,IACN,CAACrB,IAEE6B,EAAmBC,uBACvB,SAACf,QACagB,IAARhB,IAAmBA,EAAME,EAAMF,KAEjCG,EADU,QAARH,EACO,CACPA,IAAKA,EACLC,cAAehB,GAGR,CACPe,IAAKA,EACLC,cAAehB,EAAMgC,QAAO,SAACC,GAAD,OAC1BA,EAAKV,KAAKC,YAAYL,KAAKe,SAASnB,UAK5C,CAACf,EAAOiB,EAAMF,MAGhBoB,aAAkB,WACZnC,EAAM0B,OAASnC,EAASG,QAAUS,IACpCU,IACAgB,OAEDf,GAkBH,OAXArB,qBAAU,WACR,GAAIM,EAASqC,KAAM,CAAC,IAEPrB,EACPsB,IAAYC,SAASvC,EAASqC,MADhCG,MAASxB,IAEPA,GACFc,EAAiBd,MAGpB,CAAChB,EAASqC,KAAMP,IAGjB,YAAC,IAAD,KACE,YAAC,IAAD,CAAKW,MAAOjC,IACZ,YAACV,EAAD,KACE,YAAC,IAAD,MACA,kBAAI4C,UAAU,iBAAiBC,IAAG,GAAlC,IACInC,IAGN,YAAC,IAAD,CAAczB,KAAMiB,EAASU,WAC7B,YAACZ,EAAD,KACE,YAAC,IAAD,CAAasB,KAAMA,EAAMwB,WA3BZ,SAAC5B,GAClB6B,mBAAS,QAAQ7B,GACjBc,EAAiBd,IAyBoCE,MAAOA,IACxB,IAA/BA,EAAMD,cAAcU,QACnB,mBAAKgB,IAAG,GAAR,aAEDzB,EAAMD,cACJ6B,MAAM,EAAGxD,EAAQc,GACjBmB,KAAI,SAACW,EAAMa,GACV,OAAO,YAAC,IAAD,CAAMb,KAAMA,EAAMc,IAAG,QAAUD,QAG5C,mBAAKE,IAAKlC,MAKT,IAAMmC,EAAS,c,kCC5GtB,gBAkBed,IAhBW,SAACe,EAAUF,GACnCvD,qBAAU,WACR,IAAI0D,EAUJ,OATIH,EAAItD,UACNyD,EAAW,IAAIC,sBAAqB,SAACC,GACnCA,EAAQC,SAAQ,SAACC,GACVA,EAAMC,gBACXN,WAGKO,QAAQT,EAAItD,SAEhB,kBAAMyD,GAAYA,EAASO,gBACjC,CAACV,EAAKE,M,yHCTLrD,EAAO,wL,kKA6KE8D,IA3KM,SAAC,GAAc,IAAZ7E,EAAW,EAAXA,KACd8E,EAAeC,qBAAWC,KAA1BF,WADyB,EAECzE,oBAAS,GAApC4E,EAF0B,KAEfC,EAFe,KAKjBC,EACZC,yBAAe,cADjBC,WAAcF,MAehB,OACE,8BACE,YAACpE,EAAD,KACE,kBAAI6C,IAAG,GACL,sBACEA,IAAKA,YAAF,2GAGCkB,EAAU,8IAHX,KAKHQ,QAAS,WACPJ,GAAcD,KAPlB,mBAUmBA,EAAY,IAAM,KAErC,uBACGE,EAAM3C,KAAI,SAAC+C,EAAUvB,GACpB,GAA8B,KAA1BuB,EAASC,aACX,OACE,kBACEvB,IAAG,gBAAkBD,EACrBJ,IAAKA,YAAF,yKAGC5D,GACFyF,UAAUzF,KAAV,IAAwBuF,EAASC,aAAjC,KADE,kFAISV,EAAa,UAAY,WAJlC,8BAHD,kBAUUA,EAAa,UAAY,UAVnC,OAcH,YAAC,OAAD,CACEY,GAAE,IAAMH,EAASC,aAAf,IACF5B,IAAKA,YAAF,WACUqB,EAAY,QAAU,OADhC,MAIFM,EAASC,aACPG,QAAQ,IAAK,KACb7D,OACA6D,QAAQ,IAAK,aAShC,mBACE/B,IAAKA,YAAF,ilBAkCKkB,EACEc,gBAAcC,WACd,IACAD,gBAAcE,WACd,IACAF,gBAAcG,WACdC,iBAAeH,WACf,IACAG,iBAAeF,WACf,IACAE,iBAAeD,WA5CtB,8BAkDH,kBAAInC,IAAG,GACL,kBACEA,IAAKA,YAAF,2GAGCkB,EAAU,8IAHX,MAMH,YAAC,OAAD,CAAMY,GAAE,KAAR,eAEDP,EAAM3C,KAAI,SAAC+C,EAAUvB,GACpB,MAA8B,KAA1BuB,EAASC,aAET,kBACEvB,IAAG,YAAcD,EACjBJ,IAAKA,YAAF,sIAGC5D,GACFyF,UAAUzF,KAAV,IAAwBuF,EAASC,aAAjC,KADE,kFAIWV,EAAa,UAAY,WAJpC,8BAHD,kBAUUA,EAAa,UAAY,UAVnC,OAcH,YAAC,OAAD,CAAMY,GAAE,IAAMH,EAASC,aAAf,KACLD,EAASC,aACPG,QAAQ,IAAK,KACb7D,OACA6D,QAAQ,IAAK,OAKjB","file":"component---src-templates-category-js-3b2974a34c717ee229af.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nconst useCount = (path) => {\n  const initialCount =\n    typeof window !== `undefined`\n      ? window.sessionStorage.getItem(`${path}_count`)\n      : 1\n  const [count, setCount] = useState(Number(initialCount))\n  const countRef = useRef(count)\n  const increaseCount = () => setCount((prev) => prev + 1)\n\n  useEffect(() => {\n    countRef.current = count\n    window.sessionStorage.setItem(`${path}_count`, count)\n  }, [count, path])\n\n  return [count, countRef, increaseCount]\n}\n\nexport default useCount\n","import tw from \"twin.macro\"\nimport React, { useMemo, useState, useEffect, useCallback, useRef } from \"react\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/Profile\"\nimport Post from \"../components/Post\"\nimport Layout from \"../components/Layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport TagSelector from \"../components/TagSelector\"\nimport useInfiniteScroll from \"../lib/hooks/useInfiniteScroll\"\nimport useCount from \"../lib/hooks/useCount\"\nimport CategoryMenu from \"../components/CategoryMenu\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges\n  const { countOfInitialPost } = data.site.siteMetadata.configs\n  const categoryTitle = String(location.pathname).split(\"/\").join(\" \").trim()\n\n  const [count, countRef, increaseCount] = useCount(categoryTitle)\n  const bottomRef = useRef()\n\n  const [state, setState] = useState({\n    tag: \"ALL\",\n    filteredPosts: posts,\n  })\n\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const setFilteredPosts = useCallback(\n    (tag) => {\n      if (tag === undefined) tag = state.tag\n      if (tag === \"ALL\") {\n        setState({\n          tag: tag,\n          filteredPosts: posts,\n        })\n      } else {\n        setState({\n          tag: tag,\n          filteredPosts: posts.filter((post) =>\n            post.node.frontmatter.tags.includes(tag)\n          ),\n        })\n      }\n    },\n    [posts, state.tag]\n  )\n\n  useInfiniteScroll(() => {\n    if (posts.length > countRef.current * countOfInitialPost) {\n      increaseCount()\n      setFilteredPosts()\n    }\n  }, bottomRef)\n\n  const onTagClick = (tag) => {\n    navigate(`?tag=${tag}`)\n    setFilteredPosts(tag)\n  }\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { tag },\n      } = queryString.parseUrl(location.href)\n      if (tag) {\n        setFilteredPosts(tag)\n      }\n    }\n  }, [location.href, setFilteredPosts])\n\n  return (\n    <Layout>\n      <SEO title={categoryTitle} />\n      <Wrapper>\n        <Profile />\n        <h1 className=\"category-title\" css={tw`mt-4 px-4 text-4xl font-bold`}>\n          #{categoryTitle}\n        </h1>\n      </Wrapper>\n      <CategoryMenu path={location.pathname} />\n      <Wrapper>\n        <TagSelector tags={tags} onTagClick={onTagClick} state={state} />\n        {state.filteredPosts.length === 0 && (\n          <div css={tw`mx-4 text-xl`}>no post..</div>\n        )}\n        {state.filteredPosts\n          .slice(0, count * countOfInitialPost)\n          .map((post, index) => {\n            return <Post post={post} key={`post_${index}`} />\n          })}\n      </Wrapper>\n      <div ref={bottomRef} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($categoryRegex: String) {\n    site {\n      siteMetadata {\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fileAbsolutePath: { regex: $categoryRegex }\n        frontmatter: { draft: { eq: false } }\n      }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY년 MM월 DD일 - hh:mm A\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import { useEffect } from \"react\"\n\nconst useInfiniteScroll = (callBack, ref) => {\n  useEffect(() => {\n    let oBserver\n    if (ref.current) {\n      oBserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return\n          callBack()\n        })\n      })\n      oBserver.observe(ref.current)\n    }\n    return () => oBserver && oBserver.disconnect()\n  }, [ref, callBack])\n}\n\nexport default useInfiniteScroll\n","import React, { useContext, useState } from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport tw, { css } from \"twin.macro\"\nimport { whiteModeColor, darkModeColor } from \"../../them-color\"\nimport ThemeContext from \"../lib/context/ThemContext\"\n\nconst Wrapper = tw.div`block xl:hidden w-full max-w-screen-md mx-auto`\n\nconst CategoryMenu = ({ path }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const [isVisible, setIsVisible] = useState(false)\n\n  const {\n    categories: { nodes },\n  } = useStaticQuery(\n    graphql`\n      query {\n        categories: allDirectory(\n          filter: { absolutePath: { regex: \"/^((?!image).)*$/\" } }\n        ) {\n          nodes {\n            relativePath\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <>\n      <Wrapper>\n        <ul css={tw`mx-4 mt-2`}>\n          <button\n            css={css`\n              transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n              ${tw`font-bold mb-2 text-lg`}\n              ${isDarkMode ? tw`text-gray-400` : tw`text-gray-700`};\n            `}\n            onClick={() => {\n              setIsVisible(!isVisible)\n            }}\n          >\n            Categories List {isVisible ? \"▲\" : \"▼\"}\n          </button>\n          <div>\n            {nodes.map((category, index) => {\n              if (category.relativePath !== \"\") {\n                return (\n                  <li\n                    key={`categorylist_${index}`}\n                    css={css`\n                      transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n                      ${tw`text-gray-500 text-base mx-2`}\n                      ${path &&\n                      decodeURI(path) === `/${category.relativePath}/` &&\n                      `\n                        font-size: 0.95rem;\n                        color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                        `}\n                        &:hover {\n                        color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                      }\n                    `}\n                  >\n                    <Link\n                      to={`/${category.relativePath}/`}\n                      css={css`\n                        display: ${isVisible ? \"block\" : \"none\"};\n                      `}\n                    >\n                      {category.relativePath\n                        .replace(\"/\", \" \")\n                        .trim()\n                        .replace(\" \", \"/\")}\n                    </Link>\n                  </li>\n                )\n              }\n            })}\n          </div>\n        </ul>\n      </Wrapper>\n      <div\n        css={css`\n          ::-webkit-scrollbar {\n            width: 4px;\n          }\n          ::-webkit-scrollbar-track {\n            background-color: transparent;\n          }\n          ::-webkit-scrollbar-thumb {\n            border-radius: 9999px;\n            background-color: gray;\n          }\n          ::-webkit-scrollbar-button {\n            width: 0;\n            height: 0;\n          }\n          /* Firefox scrollbar */\n          scrollbar-width: thin;\n          scrollbar-color: gray transparent;\n          display: none;\n          @media screen and (min-width: 1280px) {\n            float: left;\n            position: sticky;\n            top: 100px;\n            width: calc((100vw - 720px) / 2 - 80px);\n            max-width: 250px;\n            margin-left: calc((100vw - 1280px) / 2);\n            overflow: auto;\n            word-break: break-word;\n            max-height: calc(100vh - 200px);\n            fontsize: 1rem;\n            display: flex;\n            border-left-width: 4px;\n            border-image: linear-gradient(\n              180deg,\n              ${isDarkMode\n                ? darkModeColor.mainColor1 +\n                  \",\" +\n                  darkModeColor.mainColor2 +\n                  \",\" +\n                  darkModeColor.mainColor3\n                : whiteModeColor.mainColor1 +\n                  \",\" +\n                  whiteModeColor.mainColor2 +\n                  \",\" +\n                  whiteModeColor.mainColor3}\n            );\n            border-image-slice: 1;\n          }\n        `}\n      >\n        <ul css={tw`mx-4 mt-2`}>\n          <h3\n            css={css`\n              transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n              ${tw`font-bold mb-2 text-lg`}\n              ${isDarkMode ? tw`text-gray-400` : tw`text-gray-700`};\n            `}\n          >\n            <Link to={`/`}>Categories</Link>\n          </h3>\n          {nodes.map((category, index) => {\n            if (category.relativePath !== \"\") {\n              return (\n                <li\n                  key={`category_${index}`}\n                  css={css`\n                    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n                    ${tw`text-gray-500 text-sm`}\n                    ${path &&\n                    decodeURI(path) === `/${category.relativePath}/` &&\n                    `\n                        font-size: 0.95rem;\n                        color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                        `}\n                        &:hover {\n                      color: ${isDarkMode ? \"#DDDDDD\" : \"#555555\"};\n                    }\n                  `}\n                >\n                  <Link to={`/${category.relativePath}/`}>\n                    {category.relativePath\n                      .replace(\"/\", \" \")\n                      .trim()\n                      .replace(\" \", \"/\")}\n                  </Link>\n                </li>\n              )\n            }\n            return \"\"\n          })}\n        </ul>\n      </div>\n    </>\n  )\n}\n\nexport default CategoryMenu\n"],"sourceRoot":""}