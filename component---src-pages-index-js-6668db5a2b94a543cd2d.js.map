{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["Wrapper","data","location","posts","allMarkdownRemark","edges","useState","tag","filteredPosts","state","setState","tags","useMemo","result","map","node","frontmatter","i","length","j","splice","setFilteredPosts","useCallback","filter","post","includes","onTagClick","navigate","useEffect","href","queryString","parseUrl","query","title","css","selectedTag","index","onClick","sort","key","pageQuery"],"mappings":"0SAgBMA,EAAO,gI,gFAEE,sBAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAQF,EAAKG,kBAAkBC,MADA,EAEXC,mBAAS,CACjCC,IAAK,MACLC,cAAeL,IAFVM,EAF8B,KAEvBC,EAFuB,KAO/BC,EAAOC,mBAAQ,WACnB,IAAIC,EAAS,GACbV,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAeF,EAAM,sBAAOA,GAAP,YAAkBE,EAAKC,YAAYL,UAClE,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAOK,SAAUD,EACnC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIN,EAAOK,SAAUC,EACnCN,EAAOI,KAAOJ,EAAOM,IAAIN,EAAOO,OAAOD,IAAK,GAGpD,OAAON,IACN,CAACV,IAEEkB,EAAmBC,uBACvB,SAACf,GAEGG,EADU,QAARH,EACO,CACPA,IAAKA,EACLC,cAAeL,GAGR,CACPI,IAAKA,EACLC,cAAeL,EAAMoB,QAAO,SAACC,GAAD,OAC1BA,EAAKT,KAAKC,YAAYL,KAAKc,SAASlB,UAK5C,CAACJ,IAGGuB,EAAa,SAACnB,GAClBoB,mBAAS,QAAQpB,GACjBc,EAAiBd,IAcnB,OAXAqB,qBAAU,WACR,GAAI1B,EAAS2B,KAAM,CAAC,IAEPtB,EACPuB,IAAYC,SAAS7B,EAAS2B,MADhCG,MAASzB,IAEPA,GACFc,EAAiBd,MAGpB,CAACL,EAAS2B,KAAMR,IAGjB,YAAC,IAAD,KACE,YAAC,IAAD,CAAKY,MAAM,SACX,YAACjC,EAAD,KACE,YAAC,IAAD,MACA,mBAAKkC,IAAG,GACN,YAAC,IAAD,CACE3B,IAAK,MACL4B,YAAa1B,EAAMF,IACnB6B,MAAO,UACPC,QAASX,IAEX,YAAC,IAAD,CAAMf,KAAMA,EAAK2B,OAAQD,QAASX,EAAYnB,IAAKE,EAAMF,OAE1DE,EAAMD,cAAcM,KAAI,SAACU,EAAMY,GAC9B,OAAO,YAAC,IAAD,CAAMZ,KAAMA,EAAMe,IAAG,QAAUH,UAOzC,IAAMI,EAAS","file":"component---src-pages-index-js-6668db5a2b94a543cd2d.js","sourcesContent":["import tw from \"twin.macro\"\nimport React, {\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/Profile\"\nimport Post from \"../components/Post\"\nimport Layout from \"../components/Layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport Tags from \"../components/Tags\"\nimport Tag from \"../components/Tag\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges\n  const [state, setState] = useState({\n    tag: \"ALL\",\n    filteredPosts: posts,\n  })\n\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const setFilteredPosts = useCallback(\n    (tag) => {\n      if (tag === \"ALL\") {\n        setState({\n          tag: tag,\n          filteredPosts: posts,\n        })\n      } else {\n        setState({\n          tag: tag,\n          filteredPosts: posts.filter((post) =>\n            post.node.frontmatter.tags.includes(tag)\n          ),\n        })\n      }\n    },\n    [posts]\n  )\n\n  const onTagClick = (tag) => {\n    navigate(`?tag=${tag}`)\n    setFilteredPosts(tag)\n  }\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { tag },\n      } = queryString.parseUrl(location.href)\n      if (tag) {\n        setFilteredPosts(tag)\n      }\n    }\n  }, [location.href, setFilteredPosts])\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Wrapper>\n        <Profile />\n        <div css={tw`mx-4 mt-4`}>\n          <Tag\n            tag={\"ALL\"}\n            selectedTag={state.tag}\n            index={\"default\"}\n            onClick={onTagClick}\n          />\n          <Tags tags={tags.sort()} onClick={onTagClick} tag={state.tag} />\n        </div>\n        {state.filteredPosts.map((post, index) => {\n          return <Post post={post} key={`post_${index}`} />\n        })}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query PostsQuery {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}