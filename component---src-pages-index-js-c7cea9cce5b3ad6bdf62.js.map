{"version":3,"sources":["webpack:///./src/lib/hooks/useInfiniteScroll.js","webpack:///./src/lib/hooks/useCount.js","webpack:///./src/pages/index.js"],"names":["useInfiniteScroll","callBack","ref","useEffect","oBserver","current","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","disconnect","useCount","initialCount","window","sessionStorage","getItem","useState","Number","count","setCount","countRef","useRef","setItem","prev","Wrapper","pageQuery","data","location","posts","allMarkdownRemark","edges","countOfInitialPost","site","siteMetadata","configs","increaseCount","bottomRef","tag","filteredPosts","state","setState","tags","useMemo","result","map","node","frontmatter","i","length","j","splice","setFilteredPosts","useCallback","undefined","filter","post","includes","href","queryString","parseUrl","query","Layout","title","Profile","TagSelector","onTagClick","navigate","slice","index","Post","key"],"mappings":"kRAkBeA,EAhBW,SAACC,EAAUC,GACnCC,qBAAU,WACR,IAAIC,EAUJ,OATIF,EAAIG,UACND,EAAW,IAAIE,sBAAqB,SAACC,GACnCA,EAAQC,SAAQ,SAACC,GACVA,EAAMC,gBACXT,WAGKU,QAAQT,EAAIG,SAEhB,kBAAMD,GAAYA,EAASQ,gBACjC,CAACV,EAAKD,KCEIY,EAfE,WACf,IAAMC,EACJ,oBAAOC,OAAyBA,OAAOC,eAAeC,QAAQ,SAAW,EAFtD,EAGKC,mBAASC,OAAOL,IAAnCM,EAHc,KAGPC,EAHO,KAIfC,EAAWC,iBAAOH,GAQxB,OALAjB,qBAAU,WACRmB,EAASjB,QAAUe,EACnBL,OAAOC,eAAeQ,QAAQ,QAASJ,KACtC,CAACA,IAEG,CAACA,EAAOE,EAPO,kBAAMD,GAAS,SAACI,GAAD,OAAUA,EAAO,Q,YCKlDC,EAAO,gIAoFAC,GAlFE,sBAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAQF,EAAKG,kBAAkBC,MAC7BC,EAAuBL,EAAKM,KAAKC,aAAaC,QAA9CH,mBAF6B,EAGIpB,IAAlCO,EAH8B,KAGvBE,EAHuB,KAGbe,EAHa,KAI/BC,EAAYf,mBAJmB,EAMXL,mBAAS,CACjCqB,IAAK,MACLC,cAAeV,IAFVW,EAN8B,KAMvBC,EANuB,KAW/BC,EAAOC,mBAAQ,WACnB,IAAIC,EAAS,GACbf,EAAMgB,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAeF,EAAM,sBAAOA,GAAP,YAAkBE,EAAKC,YAAYL,UAClE,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAOK,SAAUD,EACnC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIN,EAAOK,SAAUC,EACnCN,EAAOI,KAAOJ,EAAOM,IAAIN,EAAOO,OAAOD,IAAK,GAGpD,OAAON,IACN,CAACf,IAEEuB,EAAmBC,uBACvB,SAACf,QACagB,IAARhB,IAAmBA,EAAME,EAAMF,KAEjCG,EADU,QAARH,EACO,CACPA,IAAKA,EACLC,cAAeV,GAGR,CACPS,IAAKA,EACLC,cAAeV,EAAM0B,QAAO,SAACC,GAAD,OAC1BA,EAAKV,KAAKC,YAAYL,KAAKe,SAASnB,UAK5C,CAACT,EAAOW,EAAMF,MAGhBvC,GAAkB,WACZ8B,EAAMoB,OAAS5B,EAASjB,QAAU4B,IACpCI,IACAgB,OAEDf,GAkBH,OAXAnC,qBAAU,WACR,GAAI0B,EAAS8B,KAAM,CAAC,IAEPpB,EACPqB,IAAYC,SAAShC,EAAS8B,MADhCG,MAASvB,IAEPA,GACFc,EAAiBd,MAGpB,CAACV,EAAS8B,KAAMN,IAGjB,YAACU,EAAA,EAAD,KACE,YAAC,IAAD,CAAKC,MAAM,SACX,YAACtC,EAAD,KACE,YAACuC,EAAA,EAAD,MACA,YAACC,EAAA,EAAD,CAAavB,KAAMA,EAAMwB,WArBZ,SAAC5B,GAClB6B,mBAAS,QAAQ7B,GACjBc,EAAiBd,IAmBoCE,MAAOA,IACvDA,EAAMD,cACJ6B,MAAM,EAAGjD,EAAQa,GACjBa,KAAI,SAACW,EAAMa,GACV,OAAO,YAACC,EAAA,EAAD,CAAMd,KAAMA,EAAMe,IAAG,QAAUF,QAG5C,mBAAKpE,IAAKoC,MAKM","file":"component---src-pages-index-js-c7cea9cce5b3ad6bdf62.js","sourcesContent":["import { useEffect } from \"react\"\n\nconst useInfiniteScroll = (callBack, ref) => {\n  useEffect(() => {\n    let oBserver\n    if (ref.current) {\n      oBserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return\n          callBack()\n        })\n      })\n      oBserver.observe(ref.current)\n    }\n    return () => oBserver && oBserver.disconnect()\n  }, [ref, callBack])\n}\n\nexport default useInfiniteScroll\n","import { useState, useEffect, useRef } from \"react\"\n\nconst useCount = () => {\n  const initialCount =\n    typeof window !== `undefined` ? window.sessionStorage.getItem(\"count\") : 1\n  const [count, setCount] = useState(Number(initialCount))\n  const countRef = useRef(count)\n  const increaseCount = () => setCount((prev) => prev + 1)\n\n  useEffect(() => {\n    countRef.current = count\n    window.sessionStorage.setItem(\"count\", count)\n  }, [count])\n\n  return [count, countRef, increaseCount]\n}\n\nexport default useCount\n","import tw from \"twin.macro\"\nimport React, { useMemo, useState, useEffect, useCallback, useRef } from \"react\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/Profile\"\nimport Post from \"../components/Post\"\nimport Layout from \"../components/Layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport TagSelector from \"../components/TagSelector\"\nimport useInfiniteScroll from \"../lib/hooks/useInfiniteScroll\"\nimport useCount from \"../lib/hooks/useCount\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges\n  const { countOfInitialPost } = data.site.siteMetadata.configs\n  const [count, countRef, increaseCount] = useCount()\n  const bottomRef = useRef()\n\n  const [state, setState] = useState({\n    tag: \"ALL\",\n    filteredPosts: posts,\n  })\n\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const setFilteredPosts = useCallback(\n    (tag) => {\n      if (tag === undefined) tag = state.tag\n      if (tag === \"ALL\") {\n        setState({\n          tag: tag,\n          filteredPosts: posts,\n        })\n      } else {\n        setState({\n          tag: tag,\n          filteredPosts: posts.filter((post) =>\n            post.node.frontmatter.tags.includes(tag)\n          ),\n        })\n      }\n    },\n    [posts, state.tag]\n  )\n\n  useInfiniteScroll(() => {\n    if (posts.length > countRef.current * countOfInitialPost) {\n      increaseCount()\n      setFilteredPosts()\n    }\n  }, bottomRef)\n\n  const onTagClick = (tag) => {\n    navigate(`?tag=${tag}`)\n    setFilteredPosts(tag)\n  }\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { tag },\n      } = queryString.parseUrl(location.href)\n      if (tag) {\n        setFilteredPosts(tag)\n      }\n    }\n  }, [location.href, setFilteredPosts])\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <Wrapper>\n        <Profile />\n        <TagSelector tags={tags} onTagClick={onTagClick} state={state} />\n        {state.filteredPosts\n          .slice(0, count * countOfInitialPost)\n          .map((post, index) => {\n            return <Post post={post} key={`post_${index}`} />\n          })}\n      </Wrapper>\n      <div ref={bottomRef} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query PostsQuery {\n    site {\n      siteMetadata {\n        configs {\n          countOfInitialPost\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}