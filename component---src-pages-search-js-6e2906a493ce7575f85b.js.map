{"version":3,"sources":["webpack:///./src/components/Tag.js","webpack:///./src/components/Search.js","webpack:///./src/pages/search.js","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/Divider.js","webpack:///./src/components/Tags.js"],"names":["Tag","onClick","tag","selectedTag","scrollToCenter","isDarkMode","useContext","ThemeContext","tabRef","useRef","handleClick","useCallback","useEffect","ref","css","darkModeColor","textColor1","whiteModeColor","Search","value","onChange","location","placeholder","onKeyPress","e","key","target","blur","onBlur","queryString","parseUrl","href","query","trim","navigate","Divider","color","Wrapper","pageQuery","data","posts","allMarkdownRemark","edges","tags","useMemo","result","map","node","frontmatter","i","length","j","splice","useState","filteredData","state","setState","searchPost","filter","post","searchQuery","toLowerCase","excerpt","title","includes","Layout","TagSelector","onTagClick","index","Post","_taggedTemplateLiteralLoose","strings","raw","slice","vertical","margin","fat","mainColor1","mainColor2","mainColor3","Tags"],"mappings":"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","file":"component---src-pages-search-js-6e2906a493ce7575f85b.js","sourcesContent":["import React, { useContext, useRef, useEffect, useCallback } from \"react\"\nimport tw, { css } from \"twin.macro\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\n\nconst Tag = ({ onClick, tag, selectedTag, scrollToCenter }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  const tabRef = useRef(null)\n\n  const handleClick = useCallback(() => {\n    if (scrollToCenter) scrollToCenter(tabRef)\n    if (onClick) onClick(tag)\n  }, [scrollToCenter, onClick, tabRef, tag])\n\n  useEffect(() => {\n    if (selectedTag === tag && scrollToCenter) {\n      scrollToCenter(tabRef)\n    }\n  }, [scrollToCenter, selectedTag, tabRef, tag])\n\n  return (\n    <button\n      ref={tabRef}\n      css={css`\n        transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        ${tw`text-base font-bold rounded-full mr-2 my-1 py-1 px-3 focus:outline-none`}\n        ${selectedTag === tag ? \"color\" : \"background-color\"}:\n        ${isDarkMode ? `#2d3748` : `#edf2f7`};\n        ${selectedTag === tag ? `background-color` : `color`}:\n        ${isDarkMode ? darkModeColor.textColor1 : whiteModeColor.textColor1};\n      `}\n      onClick={handleClick}\n    >\n      {tag}\n    </button>\n  )\n}\n\nexport default Tag\n","import React from \"react\"\nimport tw from \"twin.macro\"\nimport queryString from \"query-string\"\nimport { AiOutlineSearch } from \"react-icons/ai\"\nimport Divider from \"./Divider\"\nimport { navigate } from \"gatsby\"\n\nconst Search = ({ value, onChange, location }) => {\n  const handlePress = (e) => {\n    if (e.key === \"Enter\") {\n      e.target.blur()\n    }\n  }\n\n  const handleBlur = (e) => {\n    const {\n      query: { query, tag },\n    } = queryString.parseUrl(location.href)\n    if (query !== value.trim())\n      if (tag && tag !== \"ALL\") {\n        navigate(`?query=${value.trim()}&tag=${tag}`)\n      } else {\n        navigate(`?query=${value.trim()}`)\n      }\n  }\n\n  return (\n    <>\n      <div css={tw`my-4 p-4 w-full`}>\n        <div css={tw`flex mb-2`}>\n          <AiOutlineSearch css={tw`text-gray-500 my-auto w-8 h-8`} />\n          <input\n            css={tw`appearance-none focus:outline-none w-full ml-2 bg-transparent placeholder-gray-600`}\n            placeholder={\"검색어를 입력해주세요.\"}\n            value={value}\n            onChange={onChange}\n            onKeyPress={handlePress}\n            onBlur={handleBlur}\n          />\n        </div>\n        <Divider color />\n      </div>\n    </>\n  )\n}\n\nexport default Search\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\"\nimport tw from \"twin.macro\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport { graphql, navigate } from \"gatsby\"\nimport queryString from \"query-string\"\nimport Search from \"../components/Search\"\nimport Post from \"../components/Post\"\nimport TagSelector from \"../components/TagSelector\"\n\nconst Wrapper = tw.div`w-full max-w-screen-md mx-auto`\n\nexport default ({ data, location }) => {\n  const posts = data.allMarkdownRemark.edges ? data.allMarkdownRemark.edges : []\n  const tags = useMemo(() => {\n    var result = []\n    posts.map(({ node }) => (result = [...result, ...node.frontmatter.tags]))\n    for (var i = 0; i < result.length; ++i) {\n      for (var j = i + 1; j < result.length; ++j) {\n        if (result[i] === result[j]) result.splice(j--, 1)\n      }\n    }\n    return result\n  }, [posts])\n\n  const [state, setState] = useState({\n    query: \"\",\n    tag: \"ALL\",\n    filteredData: [],\n  })\n\n  const onTagClick = (tag) => {\n    if (state.query !== \"\") {\n      navigate(`?query=${state.query}&tag=${tag}`)\n    } else {\n      navigate(`?tag=${tag}`)\n    }\n    searchPost(state.query, tag)\n  }\n\n  const handleChange = (query) => {\n    if (query.trim() === state.query.trim()) {\n      setState({\n        ...state,\n        query,\n      })\n      return\n    }\n    searchPost(query, state.tag)\n  }\n\n  const searchPost = useCallback(\n    (query, tag) => {\n      if (query.trim() === \"\") {\n        setState({\n          query,\n          tag,\n          filteredData: [],\n        })\n        return\n      }\n\n      const filteredData = posts.filter((post) => {\n        const searchQuery = query.toLowerCase().trim()\n        const {\n          excerpt,\n          frontmatter: { title, tags },\n        } = post.node\n        if (tag === \"ALL\") {\n          return (\n            (excerpt && excerpt.toLowerCase().includes(searchQuery)) ||\n            (title && title.toLowerCase().includes(searchQuery))\n          )\n        }\n        if (tags.includes(tag))\n          return (\n            (excerpt && excerpt.toLowerCase().includes(searchQuery)) ||\n            (title && title.toLowerCase().includes(searchQuery))\n          )\n        return []\n      })\n\n      setState({\n        tag: tag,\n        query: query,\n        filteredData: filteredData,\n      })\n    },\n    [posts]\n  )\n\n  useEffect(() => {\n    if (location.href) {\n      const {\n        query: { query, tag },\n      } = queryString.parseUrl(location.href)\n      searchPost(query ? query : \"\", tag ? tag : \"ALL\")\n    }\n  }, [searchPost, location.href])\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <Wrapper>\n        <Search\n          value={state.query}\n          onChange={(e) => handleChange(e.target.value)}\n          location={location}\n        />\n        <TagSelector tags={tags} onTagClick={onTagClick} state={state} />\n        {state.filteredData.map((post, index) => (\n          <Post post={post} key={`post_${index}`} />\n        ))}\n      </Wrapper>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React, { useContext } from \"react\"\nimport ThemeContext from \"../lib/context/ThemContext\"\nimport { darkModeColor, whiteModeColor } from \"../../them-color\"\nimport tw, { css } from \"twin.macro\"\n\nconst Divider = ({ vertical, color, margin, fat }) => {\n  const { isDarkMode } = useContext(ThemeContext)\n  return (\n    <>\n      <div\n        css={\n          vertical\n            ? [tw`h-full flex justify-center`, margin && tw`my-2`]\n            : [tw`flex justify-center`, margin && tw`mx-2`]\n        }\n      >\n        <div\n          css={[\n            tw`rounded-full`,\n            fat\n              ? vertical\n                ? tw`h-full w-1 my-auto`\n                : tw`w-full h-1`\n              : vertical\n              ? tw`h-full w-px my-auto`\n              : tw`w-full h-px`,\n            isDarkMode ? tw`bg-gray-800` : tw`bg-gray-100`,\n            color &&\n              css`\n                background: linear-gradient(\n                  ${vertical ? \"180\" : \"270\"}deg,\n                  ${isDarkMode\n                    ? darkModeColor.mainColor1 +\n                      \",\" +\n                      darkModeColor.mainColor2 +\n                      \",\" +\n                      darkModeColor.mainColor3\n                    : whiteModeColor.mainColor1 +\n                      \",\" +\n                      whiteModeColor.mainColor2 +\n                      \",\" +\n                      whiteModeColor.mainColor3}\n                );\n              `,\n          ]}\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Divider\n","import React from \"react\"\nimport Tag from \"./Tag\"\n\nconst Tags = ({ tags, onClick, tag: selectedTag, scrollToCenter }) => {\n  return tags.map((tag, index) => (\n    <Tag\n      tag={tag}\n      selectedTag={selectedTag}\n      scrollToCenter={scrollToCenter}\n      key={`tag_${index}`}\n      onClick={onClick}\n    />\n  ))\n}\n\nexport default Tags\n"],"sourceRoot":""}